#include "AorusLCDController.h"

#include <stdexcept>
#include <string>

typedef int(* _GvWriteI2C)(uint32_t, void*, uint32_t);

AorusLCDController::AorusLCDController()
{
	m_gvdisplay = LoadLibrary(L"C:\\Program Files (x86)\\GIGABYTE\\AORUS LCD Panel Setting\\GvDisplay.dll");

	if (!m_gvdisplay)
		throw std::runtime_error("Failed to load GvDisplay.dll");

	_GvReadI2C = reinterpret_cast<TGvReadI2C>(GetProcAddress(m_gvdisplay, "GvReadI2C"));

	if (!_GvReadI2C)
		throw std::runtime_error("Failed to load GvReadI2C from GvDisplay.dll");

	_GvWriteI2C = reinterpret_cast<TGvWriteI2C>(GetProcAddress(m_gvdisplay, "GvWriteI2C"));

	if (!_GvWriteI2C)
		throw std::runtime_error("Failed to load GvWriteI2C from GvDisplay.dll");

	_GvInitDispLib = reinterpret_cast<TGvInitDispLib>(GetProcAddress(m_gvdisplay, "GvInitDispLib"));

	if (!_GvInitDispLib)
		throw std::runtime_error("Failed to load GvInitDispLib from GvDisplay.dll");

	_GvFreeDispLib = reinterpret_cast<TGvFreeDispLib>(GetProcAddress(m_gvdisplay, "GvFreeDispLib"));

	if (!_GvFreeDispLib)
		throw std::runtime_error("Failed to load GvFreeDispLib from GvDisplay.dll");

	uint32_t result = _GvInitDispLib();
	if (result != 0)
		throw std::runtime_error("GvInitDispLib() failed: " + std::to_string(result));
}

AorusLCDController::~AorusLCDController()
{
	if (m_gvdisplay)
	{
		if (_GvFreeDispLib)
			_GvFreeDispLib();

		FreeLibrary(m_gvdisplay);
	}
}

uint32_t AorusLCDController::SetLCDStatus(bool on_off)
{
	const unsigned int I2CBufferSize = 0x120;

	uint8_t payload[I2CBufferSize] = {
		0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xCB, 0x55, 0xAC, 0x38, 0x02, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
	};

	payload[13] = on_off ? 0x1: 0x2;

	return _GvWriteI2C(0x0 /* device index? */, payload);
}


void AorusLCDController::ReadI2C()
{
	uint8_t buffer[0x200 /* 0x110 */ ] = {
		0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0xCB, 0x55, 0xAC, 0x38, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
	};

	uint8_t buffer2[0x256 /* 4? */] = { 0x0 };

	uint32_t result = _GvReadI2C(0x0, buffer, buffer2, 0x4);
}


// TODO

//DWORD  verHandle = 0;
//UINT   size = 0;
//LPBYTE lpBuffer = NULL;
//DWORD  verSize = GetFileVersionInfoSize(szVersionFile, &verHandle);
//
//if (verSize != NULL)
//{
//	LPSTR verData = new char[verSize];
//
//	if (GetFileVersionInfo(szVersionFile, verHandle, verSize, verData))
//	{
//		if (VerQueryValue(verData, "\\", (VOID FAR * FAR*) & lpBuffer, &size))
//		{
//			if (size)
//			{
//				VS_FIXEDFILEINFO* verInfo = (VS_FIXEDFILEINFO*)lpBuffer;
//				if (verInfo->dwSignature == 0xfeef04bd)
//				{
//
//					// Doesn't matter if you are on 32 bit or 64 bit,
//					// DWORD is always 32 bits, so first two revision numbers
//					// come from dwFileVersionMS, last two come from dwFileVersionLS
//					TRACE("File Version: %d.%d.%d.%d\n",
//						(verInfo->dwFileVersionMS >> 16) & 0xffff,
//						(verInfo->dwFileVersionMS >> 0) & 0xffff,
//						(verInfo->dwFileVersionLS >> 16) & 0xffff,
//						(verInfo->dwFileVersionLS >> 0) & 0xffff
//					);
//				}
//			}
//		}
//	}
//	delete[] verData;
//}